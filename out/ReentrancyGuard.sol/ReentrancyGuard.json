{"abi":[],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/libraries/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b62bb90c1264147f225a647eddb730155b6790406533e676cec6a47baba3573\",\"dweb:/ipfs/QmRjQE1uJsAqxChWC3dTLtTpuCnbfhKn9CZP9BkiDx62HE\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/libraries/utils/ReentrancyGuard.sol":"ReentrancyGuard"},"evmVersion":"istanbul","libraries":{}},"sources":{"src/libraries/utils/ReentrancyGuard.sol":{"keccak256":"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03","urls":["bzz-raw://2b62bb90c1264147f225a647eddb730155b6790406533e676cec6a47baba3573","dweb:/ipfs/QmRjQE1uJsAqxChWC3dTLtTpuCnbfhKn9CZP9BkiDx62HE"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"src/libraries/utils/ReentrancyGuard.sol","id":80720,"exportedSymbols":{"ReentrancyGuard":[80719]},"nodeType":"SourceUnit","src":"33:2562:136","nodes":[{"id":80681,"nodeType":"PragmaDirective","src":"33:23:136","nodes":[],"literals":["solidity","0.6",".12"]},{"id":80719,"nodeType":"ContractDefinition","src":"809:1785:136","nodes":[{"id":80685,"nodeType":"VariableDeclaration","src":"1588:41:136","nodes":[],"constant":true,"mutability":"constant","name":"_NOT_ENTERED","overrides":null,"scope":80719,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80683,"name":"uint256","nodeType":"ElementaryTypeName","src":"1588:7:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"31","id":80684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1628:1:136","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"id":80688,"nodeType":"VariableDeclaration","src":"1635:37:136","nodes":[],"constant":true,"mutability":"constant","name":"_ENTERED","overrides":null,"scope":80719,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80686,"name":"uint256","nodeType":"ElementaryTypeName","src":"1635:7:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"32","id":80687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1671:1:136","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"id":80690,"nodeType":"VariableDeclaration","src":"1679:23:136","nodes":[],"constant":false,"mutability":"mutable","name":"_status","overrides":null,"scope":80719,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80689,"name":"uint256","nodeType":"ElementaryTypeName","src":"1679:7:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"id":80698,"nodeType":"FunctionDefinition","src":"1709:63:136","nodes":[],"body":{"id":80697,"nodeType":"Block","src":"1733:39:136","nodes":[],"statements":[{"expression":{"argumentTypes":null,"id":80695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":80693,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80690,"src":"1743:7:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":80694,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80685,"src":"1753:12:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1743:22:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":80696,"nodeType":"ExpressionStatement","src":"1743:22:136"}]},"documentation":null,"implemented":true,"kind":"constructor","modifiers":[],"name":"","overrides":null,"parameters":{"id":80691,"nodeType":"ParameterList","parameters":[],"src":"1721:2:136"},"returnParameters":{"id":80692,"nodeType":"ParameterList","parameters":[],"src":"1733:0:136"},"scope":80719,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":80718,"nodeType":"ModifierDefinition","src":"2147:445:136","nodes":[],"body":{"id":80717,"nodeType":"Block","src":"2171:421:136","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":80704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":80702,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80690,"src":"2260:7:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":80703,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80688,"src":"2271:8:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2260:19:136","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":80705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2281:33:136","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":80701,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2252:7:136","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":80706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2252:63:136","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80707,"nodeType":"ExpressionStatement","src":"2252:63:136"},{"expression":{"argumentTypes":null,"id":80710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":80708,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80690,"src":"2390:7:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":80709,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80688,"src":"2400:8:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2390:18:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":80711,"nodeType":"ExpressionStatement","src":"2390:18:136"},{"id":80712,"nodeType":"PlaceholderStatement","src":"2419:1:136"},{"expression":{"argumentTypes":null,"id":80715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":80713,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80690,"src":"2563:7:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":80714,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80685,"src":"2573:12:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2563:22:136","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":80716,"nodeType":"ExpressionStatement","src":"2563:22:136"}]},"documentation":{"id":80699,"nodeType":"StructuredDocumentation","src":"1778:364:136","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."},"name":"nonReentrant","overrides":null,"parameters":{"id":80700,"nodeType":"ParameterList","parameters":[],"src":"2168:2:136"},"virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":80682,"nodeType":"StructuredDocumentation","src":"58:750:136","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"linearizedBaseContracts":[80719],"name":"ReentrancyGuard","scope":80720}],"license":"MIT"},"id":136}